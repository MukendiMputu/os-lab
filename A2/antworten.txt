A.  Thread-Synchronisation

1. Scheduling / Synchronisation

VRR
+---+-------------------------------+
| A |CCC-----CCCEE--CCC----CCCEE---C|
| B |---CCCEEE--CCCEEE--CCCEEE--CCCE|
| C |------CCEEEE--C---CEEEE--CCEEEE|
+---+-------------------------------+

FCFS
+---+-------------------------------+
| A |CCCCCCEE---CCCCCCEE---CCCCCCEE-|
| B |------CCCEEE-----CCCEEE-----CCC|
| C |---------CCEEEE-----CCEEEE-----|
+---+-------------------------------+

2. Der Vorteil beim VRR ist, dass Prozesse, welche freiwillig den CPU freigeben,
  um E/A-Stöße auszuführen, kommen in eine Vorzugsliste, die vor der Ready-Liste
  abgearbeitet wird. Somit bekommen Prozesse der Vorzugsliste ihre 'gutgeschriebene'
  Quantum-Restzeit zugeteilt (aber nur eben die Restzeit und nicht mehr).
  Der vorteilige Effekt ist also, dass E/A-lastige Prozesse fürs freiwillige Abgeben
  des CPU nicht benachteiligt werden.

3. Semaphoren (span. semáforos: Ampel) sind Datenstrukturen, die verwendet werden,
  um den Zugriff auf Resourcen zwischen asynchronlaufende Prozesse bzw. Threads zu
  regulieren. Diese Datenstruktur besteht aus einer int Ganzzahl und zwei Operationen,
  welche diese Zahl inkrementieren bzw. dekrementieren.

B. Analyse

1. Solch eine Situation nennt man Race Condition oder auch Wettlaufsituation.

2. Das Problem kann z.B. entstehen, wennn zwei parallel laufende Prozesse A & B
  auf die Variable shared_kunden_anzahl zugreifen, um sie zu dekrementieren.
  Unsynchronisiert
