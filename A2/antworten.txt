A.  Thread-Synchronisation

1. Scheduling / Synchronisation

VRR
+---+-------------------------------+
| A |CCC-----CCCEE--CCC----CCCEE---C|
| B |---CCCEEE--CCCEEE--CCCEEE--CCCE|
| C |------CCEEEE--C---CEEEE--CCEEEE|
+---+-------------------------------+

FCFS
+---+-------------------------------+
| A |CCCCCCEE---CCCCCCEE---CCCCCCEE-|
| B |------CCCEEE-----CCCEEE-----CCC|
| C |---------CCEEEE-----CCEEEE-----|
+---+-------------------------------+

2. Der Vorteil beim VRR ist, dass Prozesse, welche freiwillig den CPU freigeben,
  um E/A-Stöße auszuführen, kommen in eine Vorzugsliste, die vor der Ready-Liste
  abgearbeitet wird. Somit bekommen Prozesse der Vorzugsliste ihre 'gutgeschriebene'
  Quantum-Restzeit zugeteilt (aber nur eben die Restzeit und nicht mehr).
  Der vorteilige Effekt ist also, dass E/A-lastige Prozesse fürs freiwillige Abgeben
  des CPU nicht benachteiligt werden.

3. Semaphoren (span. semáforos: Ampel) sind Datenstrukturen, die verwendet werden,
  um den Zugriff auf Resourcen zwischen asynchronlaufende Prozesse bzw. Threads zu
  regulieren. Diese Datenstruktur besteht aus einer int Ganzzahl und zwei Operationen,
  welche diese Zahl inkrementieren bzw. dekrementieren.

B. Analyse

1. Solch eine Situation nennt man Race Condition oder auch Wettlaufsituation.

2. Angenommen wir haben nur 2 Threads, die jeweils mit einer if-Verzweigug überprüfen,
  ob die Anzahl der Kunden größer als 0 ist, bevor sie einen Kunden abkassiert.
  Es kann z.B. passieren, dass genau dann, wenn Thread A die Bedingung positiv
  überprüft hat, dass diesem den CPU entzogen wird und Thread B zugeteilt wird.
  Wenn es sich dabei um den letzten Kunden handelt, wird also Thread B, diesen
  abkassieren und beeden, und ein bisschen später wenn Thread A wieder den CPU
  zugeteilt wird, auch diese Variable 'Anzahl der Kunden' dekrementieren und somit
  das Gesamtergebnis von -1 verursachen.
